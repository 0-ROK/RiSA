name: Build and Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for release (e.g., v0.1.1)"
        required: true
        default: "v0.1.1"

env:
  # Mask sensitive values in logs
  APPLE_ID: ${{ secrets.APPLE_ID }}
  APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
  APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
  APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
  APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
  WIN_CSC_LINK: ${{ secrets.WIN_CSC_LINK }}
  WIN_CSC_KEY_PASSWORD: ${{ secrets.WIN_CSC_KEY_PASSWORD }}

  # CI and build configuration
  CI: true

  # Code signing configuration
  CSC_IDENTITY_AUTO_DISCOVERY: true

permissions:
  contents: write

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Cache pnpm dependencies
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Fix electron installation
        run: |
          if [ -f "node_modules/electron/install.js" ]; then
            node node_modules/electron/install.js
          fi
        shell: bash

      - name: Build application
        run: pnpm run build

      - name: Import Apple certificate (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          if [ -n "$APPLE_CERTIFICATE" ]; then
            echo "Setting up Apple certificate..."
            
            # Create variables for keychain
            KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
            KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
            
            # Decode certificate from base64
            echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
            
            # Create temporary keychain
            security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
            security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
            
            # Import certificate
            security import certificate.p12 -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
            security list-keychain -d user -s $KEYCHAIN_PATH login.keychain-db
            security default-keychain -s $KEYCHAIN_PATH
            
            # Allow codesign to access the certificate without password prompt
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH >/dev/null 2>&1

            echo "Certificate imported successfully"

            # Verify certificate (minimal output)
            if security find-identity -p codesigning $KEYCHAIN_PATH >/dev/null 2>&1; then
              echo "Certificate verification successful"
            else
              echo "Certificate verification failed"
              exit 1
            fi

            # Clean up certificate file
            rm -f certificate.p12
          else
            echo "No Apple certificate found in secrets"
          fi

      - name: Validate secrets (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "Linux 빌드에서는 별도의 secret 검증이 필요하지 않습니다."

      - name: Package application (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: pnpm run package:linux

      - name: List built files (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo "=== Built files for Linux ==="
          find . -type f \( -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec ls -la {} \;

      - name: Validate secrets (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          if [ -z "$WIN_CSC_LINK" ]; then
            echo "❌ ERROR: WIN_CSC_LINK secret이 설정되지 않았습니다."
            echo "Windows 코드 사이닝을 위해 WIN_CSC_LINK secret을 설정해주세요."
            exit 1
          fi

          if [ -z "$WIN_CSC_KEY_PASSWORD" ]; then
            echo "❌ ERROR: WIN_CSC_KEY_PASSWORD secret이 설정되지 않았습니다."
            echo "Windows 코드 사이닝을 위해 WIN_CSC_KEY_PASSWORD secret을 설정해주세요."
            exit 1
          fi

          echo "✅ Windows 코드 사이닝 secrets가 모두 설정되었습니다."
        shell: bash

      - name: Package application (Windows)
        if: matrix.os == 'windows-latest'
        env:
          CSC_IDENTITY_AUTO_DISCOVERY: false
        run: pnpm run package:win

      - name: List built files (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          echo "=== Built files for Windows ==="
          Get-ChildItem -Recurse -Include "*.exe","*.msi" | ForEach-Object { Write-Host $_.FullName "; Size:" $_.Length }
        shell: powershell

      - name: Validate secrets (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Apple 인증서 관련 secrets 검증
          if [ -z "$APPLE_CERTIFICATE" ]; then
            echo "❌ ERROR: APPLE_CERTIFICATE secret이 설정되지 않았습니다."
            echo "macOS 코드 사이닝을 위해 APPLE_CERTIFICATE secret을 설정해주세요."
            exit 1
          fi

          if [ -z "$APPLE_CERTIFICATE_PASSWORD" ]; then
            echo "❌ ERROR: APPLE_CERTIFICATE_PASSWORD secret이 설정되지 않았습니다."
            echo "macOS 코드 사이닝을 위해 APPLE_CERTIFICATE_PASSWORD secret을 설정해주세요."
            exit 1
          fi

          # Apple ID 관련 secrets 검증
          if [ -z "$APPLE_ID" ]; then
            echo "❌ ERROR: APPLE_ID secret이 설정되지 않았습니다."
            echo "macOS 노타리제이션을 위해 APPLE_ID secret을 설정해주세요."
            exit 1
          fi

          if [ -z "$APPLE_ID_PASSWORD" ]; then
            echo "❌ ERROR: APPLE_ID_PASSWORD secret이 설정되지 않았습니다."
            echo "macOS 노타리제이션을 위해 APPLE_ID_PASSWORD secret을 설정해주세요."
            exit 1
          fi

          if [ -z "$APPLE_TEAM_ID" ]; then
            echo "❌ ERROR: APPLE_TEAM_ID secret이 설정되지 않았습니다."
            echo "macOS 노타리제이션을 위해 APPLE_TEAM_ID secret을 설정해주세요."
            exit 1
          fi

          echo "✅ macOS 코드 사이닝 및 노타리제이션 secrets가 모두 설정되었습니다."
        shell: bash

      - name: Package application (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          # Check if certificate was imported (suppress sensitive output)
          if security find-identity -p codesigning | grep -q "Developer ID Application" 2>/dev/null; then
            echo "Certificate found, building with code signing and notarization"

            # Build and sign
            pnpm run package:mac

            # Verify signing (minimal output to avoid exposing sensitive info)
            echo "Verifying code signature..."
            for app in release/**/*.app; do
              if [ -e "$app" ]; then
                echo "Checking: $(basename "$app")"
                if codesign --verify --deep --strict "$app" >/dev/null 2>&1; then
                  echo "✓ Code signature valid for $(basename "$app")"
                else
                  echo "⚠ Code signature verification failed for $(basename "$app")"
                fi
              fi
            done
          else
            echo "Unexpected: Certificate not found after validation"
            exit 1
          fi

      - name: List built files (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          echo "=== Built files for macOS ==="
          find . -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.app" \) -exec ls -la {} \;

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            **/*.exe
            **/*.msi
            **/*.dmg
            **/*.zip
            **/*.AppImage
            **/*.deb
            **/*.rpm
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      release_files: ${{ steps.get_files.outputs.files }}
      tag_name: ${{ steps.get_tag.outputs.tag_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get tag name
        id: get_tag
        run: echo "tag_name=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: List downloaded artifacts
        run: |
          echo "=== Downloaded artifacts ==="
          find . -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) -exec ls -la {} \;
          echo "=== All files in current directory ==="
          ls -la

      - name: Get release files info
        id: get_files
        run: |
          echo "files<<EOF" >> $GITHUB_OUTPUT
          find . -type f \( -name "*.exe" -o -name "*.msi" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" -o -name "*.deb" -o -name "*.rpm" \) | while read file; do
            filename=$(basename "$file")
            size=$(stat -c%s "$file" 2>/dev/null || stat -f%z "$file" 2>/dev/null || echo "0")
            echo "{\"name\":\"$filename\",\"size\":$size}"
          done | jq -s . >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release/*.exe
            release/*.msi
            release/*.dmg
            release/*.zip
            release/*.AppImage
            release/*.deb
            release/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-pages:
    if: always()
    needs: release
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Generate landing page using script
        run: |
          # Use tag from GitHub ref if release job outputs are not available
          if [ -n "${{ needs.release.outputs.tag_name }}" ]; then
            TAG_NAME="${{ needs.release.outputs.tag_name }}"
          else
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          fi

          # Run the page generation script
          ./scripts/generate-page.sh "$TAG_NAME" "${{ github.repository }}"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site"

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
